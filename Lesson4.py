# # 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# # В расчете необходимо использовать формулу:
# # (выработка в часах * ставка в час) + премия.
# # Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
#
print('Задача 1')

from sys import argv
script_name, working_hours, hour_rate, bonus = argv
print('Имя скрипта', script_name)
print('Выработка в часах: ', working_hours)
print('Ставка в час в руб: ', hour_rate)
print('Премия: ', bonus)

def zp():
     return int(working_hours) * int(hour_rate) + int(bonus)
print('Ваша зарплата = ', zp(), 'рублей')

#
#
# # 2. Представлен список чисел.
# # Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# # Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# # Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# # Результат: [12, 44, 4, 10, 78, 123].

print('Задача 2')
from random import randint

# Составляем исходный список из 10 элементов
my_list = []
for i in range(1, 10):
    my_list.append(randint(0, 1000))
print('Исходный список = ', my_list)

my_new = []
for i in range(0, 8):
    if my_list[i+1] > my_list[i]:
        my_new.append(my_list[i+1])
    i = i + 2
print('Список элементов, больше предыдущих (решение обычным циклом): ', my_new)

my_new = [x for x in my_list if my_list.index(x) > 0 and x > my_list[my_list.index(x)- 1]]
print('Список элементов, больше предыдущих    (решение генератором): ', my_new)


# # 3. Для чисел в пределах от 20 до 240 найти числа,
# # кратные 20 или 21. Необходимо решить задание в одну строку.
# # Подсказка: использовать функцию range() и генератор.
# #
print('Задача 3')

new2 = [x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0]
print('Числа, кратные 20 или 21 = ', new2)
#
# # 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# # Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# # Результат: [23, 1, 3, 10, 4, 11]
#
#
print('Задача 4')

from random import randint
# Составляем исходный список из 10 элементов
my_list = []
new = []
for i in range(1, 15):
     my_list.append(randint(0, 10))
print('Исходный список = ', my_list)
new = [x for x in my_list if my_list.count(x) == 1]

print('Уникальный список = ', new)



# # 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# # Подсказка: использовать функцию reduce().
# Составляем исходный список из 10 элементов
print('Задача 5')

a = [i for i in range(100, 1001) if i % 2 == 0]
print(a)
from functools import reduce
def my_func(x,y):
    return x*y
print(reduce(my_func, a))


# # 6. Реализовать два небольших скрипта:
# # а) итератор, генерирующий целые числа, начиная с указанного,
# # б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# # Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# # Например, в первом задании выводим целые числа, начиная с 3,
# а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.


print('Задача 6  !!!!!!')
a = int(input('Введите стартовое значение: '))
from itertools import count
print('итератор, генерирующий целые числа, начиная с указанного')

for x in count(a):
    if x > 15:
        break
    else:
        print(x)
my_list = []

print('итератор, повторяющий элементы некоторого списка, определенного заранее')
from itertools import cycle
for i in range(1, 10):
      my_list.append(randint(0, 5))
print(my_list)
left = None
print('Если введете Q повторение списка будет прекращено ')
x = cycle(my_list)
while left != 'Q':
     print(next(x))
     left = input()


# # 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# # Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

#
# print('Задача 7')
#

def facterial(x):
    f = 1
    for i in range(1, x+1):
        f = i * f
        yield f


for i in facterial(3):
    print(i)
